# Project Overview:
# JobWinner is an AI-powered job application platform forked from Reactive Resume, optimized for analytics and tracking.

priority_files:
  - apps/client/next.config.js
  - apps/server/src/main.ts
  - tools/prisma/schema.prisma
  - deployment.md
  - docker-compose.yml
  - .env.example

  # Frontend files (Next.js)
  - apps/client/src/{components,app,lib,pages}/**

  # Backend files (NestJS)
  - apps/server/src/{auth,storage,resume,modules}/**

ignore_files:
  - node_modules/**
  - dist/**
  - .git/**
  - .cache/**
  - **/*.log
  - pnpm-lock.yaml
  - **/__pycache__/**
  - **/.DS_Store
  - **/*.tmp
  - **/coverage/**

context_limits:
  max_lines: 5000
  max_files: 200
  file_type_limits:
    - "*.tsx": 1500
    - "*.ts": 1500
    - "*.json": 500

special_instructions:
  - Optimize frontend components for `React Query` and `Zustand`.
  - Prioritize TailwindCSS utility-first principles in styles.
  - Use Prisma ORM schema (`prisma/schema.prisma`) for type-safe queries.
  - Focus on scalable design patterns to prevent technical debt.

coding_standards:
  - Follow the Airbnb JavaScript/TypeScript style guide.
  - Maintain a 1:3 code-to-comment ratio for clarity.
  - Ensure Prettier formatting as per `.prettierrc`.

error_fixing_process:
  - Analyze potential causes before debugging.
  - Document debugging steps.
  - Test thoroughly and validate the solution.

building_process:
  - Break changes into atomic commits.
  - Optimize for performance and scalability.
  - Maintain clear commit messages.

documentation:
  - Maintain specialized markdown files (e.g., `database.md`, `deployment.md`).
  - Use JSDoc for documenting functions and components.

comments:
  - Explain "why" and provide relevant file context.
  - Maintain clarity for future developers and AI understanding.

accessibility:
  - Ensure compliance with WAI-ARIA standards.
  - Provide alternative text for all non-decorative images.

deployment:
  - Backend: GCP Cloud Run
  - Frontend: Vercel
  - Storage: GCP Cloud Storage
  - Secure environment variables management.

security:
  - Validate and sanitize all user inputs.
  - Use HTTPS for all external communications.
  - Audit dependencies regularly for vulnerabilities.

performance:
  - Implement lazy loading for large components.
  - Use React Query for caching frequently accessed resources.

internationalization:
  - Use LinguiJS for managing translations.
  - Ensure all user-facing text is translatable.
